// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: rpc_function/calculator_rpc/calculator.proto

package calculator_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CalcService_CalcAdd_FullMethodName      = "/calculator.CalcService/CalcAdd"
	CalcService_CalcSubtract_FullMethodName = "/calculator.CalcService/CalcSubtract"
	CalcService_CalcDivide_FullMethodName   = "/calculator.CalcService/CalcDivide"
	CalcService_CalcMultiply_FullMethodName = "/calculator.CalcService/CalcMultiply"
)

// CalcServiceClient is the client API for CalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcServiceClient interface {
	CalcAdd(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcAddResponse, error)
	CalcSubtract(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcSubtractResponse, error)
	CalcDivide(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcDivideResponse, error)
	CalcMultiply(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcMultiplyResponse, error)
}

type calcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcServiceClient(cc grpc.ClientConnInterface) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) CalcAdd(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcAddResponse, error) {
	out := new(CalcAddResponse)
	err := c.cc.Invoke(ctx, CalcService_CalcAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) CalcSubtract(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcSubtractResponse, error) {
	out := new(CalcSubtractResponse)
	err := c.cc.Invoke(ctx, CalcService_CalcSubtract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) CalcDivide(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcDivideResponse, error) {
	out := new(CalcDivideResponse)
	err := c.cc.Invoke(ctx, CalcService_CalcDivide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) CalcMultiply(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcMultiplyResponse, error) {
	out := new(CalcMultiplyResponse)
	err := c.cc.Invoke(ctx, CalcService_CalcMultiply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcServiceServer is the server API for CalcService service.
// All implementations must embed UnimplementedCalcServiceServer
// for forward compatibility
type CalcServiceServer interface {
	CalcAdd(context.Context, *CalcRequest) (*CalcAddResponse, error)
	CalcSubtract(context.Context, *CalcRequest) (*CalcSubtractResponse, error)
	CalcDivide(context.Context, *CalcRequest) (*CalcDivideResponse, error)
	CalcMultiply(context.Context, *CalcRequest) (*CalcMultiplyResponse, error)
	mustEmbedUnimplementedCalcServiceServer()
}

// UnimplementedCalcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcServiceServer struct {
}

func (UnimplementedCalcServiceServer) CalcAdd(context.Context, *CalcRequest) (*CalcAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcAdd not implemented")
}
func (UnimplementedCalcServiceServer) CalcSubtract(context.Context, *CalcRequest) (*CalcSubtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcSubtract not implemented")
}
func (UnimplementedCalcServiceServer) CalcDivide(context.Context, *CalcRequest) (*CalcDivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcDivide not implemented")
}
func (UnimplementedCalcServiceServer) CalcMultiply(context.Context, *CalcRequest) (*CalcMultiplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcMultiply not implemented")
}
func (UnimplementedCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {}

// UnsafeCalcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServiceServer will
// result in compilation errors.
type UnsafeCalcServiceServer interface {
	mustEmbedUnimplementedCalcServiceServer()
}

func RegisterCalcServiceServer(s grpc.ServiceRegistrar, srv CalcServiceServer) {
	s.RegisterService(&CalcService_ServiceDesc, srv)
}

func _CalcService_CalcAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalcAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalcService_CalcAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalcAdd(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_CalcSubtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalcSubtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalcService_CalcSubtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalcSubtract(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_CalcDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalcDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalcService_CalcDivide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalcDivide(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_CalcMultiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).CalcMultiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalcService_CalcMultiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).CalcMultiply(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcService_ServiceDesc is the grpc.ServiceDesc for CalcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalcAdd",
			Handler:    _CalcService_CalcAdd_Handler,
		},
		{
			MethodName: "CalcSubtract",
			Handler:    _CalcService_CalcSubtract_Handler,
		},
		{
			MethodName: "CalcDivide",
			Handler:    _CalcService_CalcDivide_Handler,
		},
		{
			MethodName: "CalcMultiply",
			Handler:    _CalcService_CalcMultiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_function/calculator_rpc/calculator.proto",
}
