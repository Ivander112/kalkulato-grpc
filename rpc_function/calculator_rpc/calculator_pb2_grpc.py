# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calculator_pb2 as calculator__pb2


class CalcServiceStub(object):
    """Definisi layanan gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalcAdd = channel.unary_unary(
                '/calculator.CalcService/CalcAdd',
                request_serializer=calculator__pb2.CalcRequest.SerializeToString,
                response_deserializer=calculator__pb2.CalcAddResponse.FromString,
                )
        self.CalcSubtract = channel.unary_unary(
                '/calculator.CalcService/CalcSubtract',
                request_serializer=calculator__pb2.CalcRequest.SerializeToString,
                response_deserializer=calculator__pb2.CalcSubtractResponse.FromString,
                )
        self.CalcDivide = channel.unary_unary(
                '/calculator.CalcService/CalcDivide',
                request_serializer=calculator__pb2.CalcRequest.SerializeToString,
                response_deserializer=calculator__pb2.CalcDivideResponse.FromString,
                )
        self.CalcMultiply = channel.unary_unary(
                '/calculator.CalcService/CalcMultiply',
                request_serializer=calculator__pb2.CalcRequest.SerializeToString,
                response_deserializer=calculator__pb2.CalcMultiplyResponse.FromString,
                )


class CalcServiceServicer(object):
    """Definisi layanan gRPC
    """

    def CalcAdd(self, request, context):
        """penjumlahan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalcSubtract(self, request, context):
        """pengurangan
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalcDivide(self, request, context):
        """pembagian
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalcMultiply(self, request, context):
        """perkalian
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalcAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.CalcAdd,
                    request_deserializer=calculator__pb2.CalcRequest.FromString,
                    response_serializer=calculator__pb2.CalcAddResponse.SerializeToString,
            ),
            'CalcSubtract': grpc.unary_unary_rpc_method_handler(
                    servicer.CalcSubtract,
                    request_deserializer=calculator__pb2.CalcRequest.FromString,
                    response_serializer=calculator__pb2.CalcSubtractResponse.SerializeToString,
            ),
            'CalcDivide': grpc.unary_unary_rpc_method_handler(
                    servicer.CalcDivide,
                    request_deserializer=calculator__pb2.CalcRequest.FromString,
                    response_serializer=calculator__pb2.CalcDivideResponse.SerializeToString,
            ),
            'CalcMultiply': grpc.unary_unary_rpc_method_handler(
                    servicer.CalcMultiply,
                    request_deserializer=calculator__pb2.CalcRequest.FromString,
                    response_serializer=calculator__pb2.CalcMultiplyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calculator.CalcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalcService(object):
    """Definisi layanan gRPC
    """

    @staticmethod
    def CalcAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator.CalcService/CalcAdd',
            calculator__pb2.CalcRequest.SerializeToString,
            calculator__pb2.CalcAddResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalcSubtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator.CalcService/CalcSubtract',
            calculator__pb2.CalcRequest.SerializeToString,
            calculator__pb2.CalcSubtractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalcDivide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator.CalcService/CalcDivide',
            calculator__pb2.CalcRequest.SerializeToString,
            calculator__pb2.CalcDivideResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalcMultiply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator.CalcService/CalcMultiply',
            calculator__pb2.CalcRequest.SerializeToString,
            calculator__pb2.CalcMultiplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
