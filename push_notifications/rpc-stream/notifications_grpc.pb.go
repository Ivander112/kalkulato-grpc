// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: push_notifications/rpc-stream/notifications.proto

package rpc_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationsService_FruitsNotifications_FullMethodName       = "/notifications.NotificationsService/FruitsNotifications"
	NotificationsService_UniversitiesNotifications_FullMethodName = "/notifications.NotificationsService/UniversitiesNotifications"
)

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	FruitsNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (NotificationsService_FruitsNotificationsClient, error)
	UniversitiesNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (NotificationsService_UniversitiesNotificationsClient, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) FruitsNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (NotificationsService_FruitsNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationsService_ServiceDesc.Streams[0], NotificationsService_FruitsNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationsServiceFruitsNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationsService_FruitsNotificationsClient interface {
	Recv() (*FruitResponse, error)
	grpc.ClientStream
}

type notificationsServiceFruitsNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationsServiceFruitsNotificationsClient) Recv() (*FruitResponse, error) {
	m := new(FruitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationsServiceClient) UniversitiesNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (NotificationsService_UniversitiesNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationsService_ServiceDesc.Streams[1], NotificationsService_UniversitiesNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationsServiceUniversitiesNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationsService_UniversitiesNotificationsClient interface {
	Recv() (*UniversitiesResponse, error)
	grpc.ClientStream
}

type notificationsServiceUniversitiesNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationsServiceUniversitiesNotificationsClient) Recv() (*UniversitiesResponse, error) {
	m := new(UniversitiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations must embed UnimplementedNotificationsServiceServer
// for forward compatibility
type NotificationsServiceServer interface {
	FruitsNotifications(*NotificationsRequest, NotificationsService_FruitsNotificationsServer) error
	UniversitiesNotifications(*NotificationsRequest, NotificationsService_UniversitiesNotificationsServer) error
	mustEmbedUnimplementedNotificationsServiceServer()
}

// UnimplementedNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (UnimplementedNotificationsServiceServer) FruitsNotifications(*NotificationsRequest, NotificationsService_FruitsNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method FruitsNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) UniversitiesNotifications(*NotificationsRequest, NotificationsService_UniversitiesNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method UniversitiesNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_FruitsNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationsServiceServer).FruitsNotifications(m, &notificationsServiceFruitsNotificationsServer{stream})
}

type NotificationsService_FruitsNotificationsServer interface {
	Send(*FruitResponse) error
	grpc.ServerStream
}

type notificationsServiceFruitsNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationsServiceFruitsNotificationsServer) Send(m *FruitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationsService_UniversitiesNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationsServiceServer).UniversitiesNotifications(m, &notificationsServiceUniversitiesNotificationsServer{stream})
}

type NotificationsService_UniversitiesNotificationsServer interface {
	Send(*UniversitiesResponse) error
	grpc.ServerStream
}

type notificationsServiceUniversitiesNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationsServiceUniversitiesNotificationsServer) Send(m *UniversitiesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FruitsNotifications",
			Handler:       _NotificationsService_FruitsNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UniversitiesNotifications",
			Handler:       _NotificationsService_UniversitiesNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "push_notifications/rpc-stream/notifications.proto",
}
